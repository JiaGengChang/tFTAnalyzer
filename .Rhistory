df1 <- data.frame(
getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,3:n],
TFTRecording$ch2[,3:n],
row.names = getFrame(TFTRecording$ch1$Slice)
) %>% colnames
colnames(df1) <- coln
View(df1)
ratio <- sweep(TFTRecording$ch2[3:n],TFTRecording$ch1[3:n],"/")
ratio <- sweep(x=TFTRecording$ch2,
3:n,
TFTRecording$ch1[3:n],
FUN="/"
)
ratio <- sweep(x=TFTRecording$ch2,
3:n,
100,
FUN="/"
)
ratio <- sweep(TFTRecording$ch2,
3,
100,
"/")
TFTRecording$ch2[,3:N]
TFTRecording$ch2[,3:n]
ratio <- sweep(TFTRecording$ch2[,3:n],
TFTRecording$ch1[,3:n],
"/")
ratio <- sweep(TFTRecording$ch2[,3:n],
2,
TFTRecording$ch1[,3:n],
"/")
View(ch1)
View(ch2)
ch1/ch2
as.matrix(ch1)
?as.matrix
ch1[,c(-1,-2)]
ch1[[,c(-1,-2)]]
ch1[1,c(-1,-2)]
ch1[1,c(-1,-2)]/2
mapply('/',ch1[1,c(-1,-2)],2)
ch1[1,1]/2
ch1[4,4]/ch2[4,4]
ch1[4,4]/(ch2[4,4])
ch1[4,4]
as.numeric(ch1[4,4])
load("~/tFTAnalyzer/tmp.RData")
as.numeric(ch1)
lapply(FUN=as.numeric, ch1)
ch1n <- lapply(FUN=as.numeric, ch1)
View(ch1n)
ch1n <- mapply(FUN=as.numeric, ch1)
ch1n <- data.frame(mapply(FUN=as.numeric, ch1))
View(ch1n)
class(ch1n)
class(ch1n$Slice)
load("~/tFTAnalyzer/tmp.RData")
?read.csv2
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
load("~/tFTAnalyzer/tmp.RData")
file <- '~/test.pzfx'
save.image()
load("~/tFTAnalyzer/.RData")
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
dt0 <- read.csv2(file=file,
sep='\t')
dt0 <- read.csv2(file=file,
sep='\t')
file <- 'C:\Users\Jia Geng\Downloads\dt0.tsv'
file <- 'C:/Users/Jia Geng/Downloads/dt0.tsv'
save.image()
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
View(dt0)
class(dt0$C01)
mapply(as.numeric, dt0)
dt0 <- mapply(as.numeric, dt0)
dt0 <- data.frame(mapply(as.numeric, dt0))
dt0 <- data.frame(mapply(FUN=as.numeric, dt0))
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
dt0 <- data.frame(mapply(FUN=as.numeric, dt0))
View(dt0)
View(dt0)
dt0 <- data.frame(mapply(FUN=as.numeric, dt0))
stopifnot(names(dt0)[1:2] != c('Slice','Channel'))
View(dt0)
names(dt0)[1:2]
stopifnot(names(dt0)[1:2] == c('Slice','Channel'))
bg.cols <- which(mapply(grepl, delim, names(dt0)))
delim='x'
bg.cols <- which(mapply(grepl, delim, names(dt0)))
dt1 <- list(
ch1 = dt0[dt0$Channel==1,-bg.cols],
ch2 = dt0[dt0$Channel==2, -bg.cols],
bg1 = dt0[dt0$Channel==1, c(1,2,bg.cols)],
bg2 = dt0[dt0$Channel==2, c(1,2,bg.cols)],
nCells = length(names(dt1))/2-1
)
save.image()
getFrame <- function(slice){
frame <- ceiling(slice/3)
return(frame)
}
getTime <- function(slice){
out <- floor(slice/3)
return(out)
}
save.image()
n <- TFTRecording$nCells
coln <- c(
'Time(h)',
paste('mNeonGreen_', seq(n), sep = ''),
paste('mCherry_', seq(n), sep = ''),
paste('mCherry/mGreen_', seq(n), sep = '')
)
TFTRecording$ch2[,c(-1,-2)]/TFTRecording$ch1[,c(-1,-2)]
View(TFTRecording)
read.TFTRecording <- function(file, delim='x'){
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
dt0 <- data.frame(mapply(FUN=as.numeric, dt0))
stopifnot(names(dt0)[1:2] == c('Slice','Channel'))
bg.cols <- which(mapply(grepl, delim, names(dt0)))
dt1 <- list(
ch1 = dt0[dt0$Channel==1,-bg.cols],
ch2 = dt0[dt0$Channel==2, -bg.cols],
bg1 = dt0[dt0$Channel==1, c(1,2,bg.cols)],
bg2 = dt0[dt0$Channel==2, c(1,2,bg.cols)],
nCells = length(names(dt1))/2-1
)
return(dt1)
}
TFTRecording <- read.TFTRecording(file='~\test.pzfx')
TFTRecording <- read.TFTRecording(file='~/test.pzfx')
TFTRecording <- read.TFTRecording(file=file)
n <- TFTRecording$nCells
coln <- c(
'Time(h)',
paste('mNeonGreen_', seq(n), sep = ''),
paste('mCherry_', seq(n), sep = ''),
paste('mCherry/mGreen_', seq(n), sep = '')
)
save.image()
df1 <- data.frame(
getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)]/TFTRecording$ch1[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice)
)
colnames(df1) <- coln
load("~/tFTAnalyzer/.RData")
df <- data.frame(
getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)]/TFTRecording$ch1[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice)
)
colnames(df) <- coln
View(df)
TFTRecording <- read.TFTRecording(file=file)
View(df)
n <- TFTRecording$nCells
dt1 <- list(
ch1 = dt0[dt0$Channel==1,-bg.cols],
ch2 = dt0[dt0$Channel==2, -bg.cols],
bg1 = dt0[dt0$Channel==1, c(1,2,bg.cols)],
bg2 = dt0[dt0$Channel==2, c(1,2,bg.cols)],
nCells = length(names(dt0))/2-1
)
TFTRecording <- read.TFTRecording(file=file)
n <- TFTRecording$nCells
read.TFTRecording <- function(file, delim='x'){
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
dt0 <- data.frame(mapply(FUN=as.numeric, dt0))
stopifnot(names(dt0)[1:2] == c('Slice','Channel'))
bg.cols <- which(mapply(grepl, delim, names(dt0)))
dt1 <- list(
ch1 = dt0[dt0$Channel==1,-bg.cols],
ch2 = dt0[dt0$Channel==2, -bg.cols],
bg1 = dt0[dt0$Channel==1, c(1,2,bg.cols)],
bg2 = dt0[dt0$Channel==2, c(1,2,bg.cols)],
nCells = length(names(dt0))/2-1
)
return(dt1)
}
length(names(dt0))/2-1
TFTRecording <- read.TFTRecording(file=file)
n <- TFTRecording$nCells
coln <- c(
'Time(h)',
paste('mNeonGreen_', seq(n), sep = ''),
paste('mCherry_', seq(n), sep = ''),
paste('mCherry/mGreen_', seq(n), sep = '')
)
df <- data.frame(
getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)]/TFTRecording$ch1[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice)
)
colnames(df) <- coln
View(df)
df <- data.frame(
getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
round(TFTRecording$ch2[,c(-1,-2)]/TFTRecording$ch1[,c(-1,-2)],3),
row.names = getFrame(TFTRecording$ch1$Slice)
)
colnames(df) <- coln
View(df)
library(pzfx)
write_pzfx(df, path = file.path(tempdir(),'hello_world.pzfx'))
tempdir()
setwd(tempdir())
ls()
setwd(~)
setwd('~')
write_pzfx(df, path = file.path('C:/Users/Jia Geng/Documents/','hello_world.pzfx'))
?write_pzfx
write_pzfx(df,
path = file.path('C:/Users/Jia Geng/Documents/','hello_world.pzfx'),
row_names = FALSE,
x_col = 1)
write_pzfx(df,
path = file.path('C:/Users/Jia Geng/Documents/','hello_world.pzfx'),
row_names = FALSE,
x_col = 1)
read.TFTRecording <- function(file, delim='x'){
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
dt0 <- data.frame(mapply(FUN=as.numeric, dt0))
stopifnot(names(dt0)[1:2] == c('Slice','Channel'))
bg.cols <- which(mapply(grepl, delim, names(dt0)))
dt1 <- list(
ch1 = dt0[dt0$Channel==1,-bg.cols],
ch2 = dt0[dt0$Channel==2, -bg.cols],
bg1 = dt0[dt0$Channel==1, c(1,2,bg.cols)],
bg2 = dt0[dt0$Channel==2, c(1,2,bg.cols)],
nCells = length(names(dt0))/2-1
)
dt1$'ch2/ch1' <- round(dt1$ch2[,c(-1,-2)]/dt1$ch1[,c(-1,-2)],3)
return(dt1)
}
TFTRecording <- read.TFTRecording(file=file)
?':='
dt[,'ch2/ch1':= dt$ch2/dt$ch1,c(-1,-2)]
dt1[,'ch2/ch1':= dt1$ch2/dt1$ch1,c(-1,-2)]
dt1[,'ch2/ch1':= dt1$ch2/dt1$ch1)]
dt1[,'ch2/ch1':= dt1$ch2/dt1$ch1]
View(dt1)
dt1$'ch2/ch1' <- round(dt1$ch2[,c(-1,-2)]/dt1$ch1[,c(-1,-2)],3)
View(dt1)
View(dt1$`ch2/ch1`)
dt1$'ch2/ch1' <- round(dt1$ch2/dt1$ch1,3)
View(dt1$`ch2/ch1`)
rep('mNeonGreen',n)
n <- TFTRecording$nCells
coln <- c(
'Time(h)',
rep('mNeonGreen',n),
rep('mCherry',n),
rep('mCherry/mNeonGreen',n),
)
n <- TFTRecording$nCells
coln <- c(
'Time(h)',
rep('mNeonGreen',n),
rep('mCherry',n),
rep('mCherry/mNeonGreen',n),
)
coln <- c(
'Time(h)',
rep('mNeonGreen',n),
rep('mCherry',n),
rep('mCherry/mNeonGreen',n)
)
read.TFTRecording <- function(file, delim='x'){
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
dt0 <- data.frame(mapply(FUN=as.numeric, dt0))
stopifnot(names(dt0)[1:2] == c('Slice','Channel'))
bg.cols <- which(mapply(grepl, delim, names(dt0)))
dt1 <- list(
'ch1' = dt0[dt0$Channel==1,-bg.cols],
'ch2' = dt0[dt0$Channel==2, -bg.cols],
'bg1' = dt0[dt0$Channel==1, c(1,2,bg.cols)],
'bg2' = dt0[dt0$Channel==2, c(1,2,bg.cols)],
)
dt1$'ch2/ch1' <- round(dt1$ch2/dt1$ch1,3)
dt1$'nCells' = length(names(dt0))/2-1
return(dt1)
}
TFTRecording <- read.TFTRecording(file=file)
read.TFTRecording <- function(file, delim='x'){
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
dt0 <- data.frame(mapply(FUN=as.numeric, dt0))
stopifnot(names(dt0)[1:2] == c('Slice','Channel'))
bg.cols <- which(mapply(grepl, delim, names(dt0)))
dt1 <- list(
'ch1' = dt0[dt0$Channel==1,-bg.cols],
'ch2' = dt0[dt0$Channel==2, -bg.cols],
'bg1' = dt0[dt0$Channel==1, c(1,2,bg.cols)],
'bg2' = dt0[dt0$Channel==2, c(1,2,bg.cols)]
)
dt1$'ch2/ch1' <- round(dt1$ch2/dt1$ch1,3)
dt1$'nCells' = length(names(dt0))/2-1
return(dt1)
}
source('~/tFTAnalyzer/R/utility_functions.R')
TFTRecording <- read.TFTRecording(file=file)
n <- TFTRecording$nCells
coln <- c(
'Time(h)',
rep('mNeonGreen',n),
rep('mCherry',n),
rep('mCherry/mNeonGreen',n)
)
df <- data.frame(
getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$'ch2/ch1'[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice)
)
colnames(df) <- coln
library(pzfx)
write_pzfx(df,
path = file.path('C:/Users/Jia Geng/Documents/','hello_world.pzfx'),
row_names = FALSE,
x_col = 1)
?pzfx
library(pzfx)
?write_pzfx
write_pzfx(df,
path = file.path('C:/Users/Jia Geng/Documents/','hello_world.pzfx'),
row_names = TRUE,
x_col = 1)
write_pzfx(df,
path = file.path('C:/Users/Jia Geng/Documents/','hello_world.pzfx'),
row_names = TRUE,
x_col = 1)
View(df)
write_pzfx(df,
path = file.path('C:/Users/Jia Geng/Documents/','hello_world.pzfx'),
row_names = FALSE,
x_col = 1)
write_pzfx(df,
path = file.path('C:/Users/Jia Geng/Documents/','hello_world.pzfx'),
row_names = FALSE,
x_col = NA)
write_pzfx(df,
path = file.path('C:/Users/Jia Geng/Documents/','hello_world.pzfx'),
row_names = FALSE,
x_col = NA)
names(TFTRecording$ch1)[c(-1,-2)]
df <- data.frame(rbind(row0,
getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$'ch2/ch1'[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice)
)
)
row0 <- rep(names(TFTRecording$ch1)[c(-1,-2)],3)
df <- data.frame(rbind(row0,
getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$'ch2/ch1'[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice)
)
)
View(df)
coln <- c(
'Time(h)',
c('mNeonGreen', rep(NA, n-1)),
c('mCherry', rep(NA, n-1)),
c('mCherry/mNeon', rep(NA, n-1))
)
row0 <- rep(names(TFTRecording$ch1)[c(-1,-2)],3)
df <- data.frame(getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$'ch2/ch1'[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice))
df <- rbind(row0,df)
colnames(df) <- coln
View(df)
?write.table
write.table(df,
file=file.path('~/','hello_world.xlsx'),
na = "NA"
)
write.csv2(df,
file=file.path('~/','hello_world.xlsx'),
na = "NA"
)
write.csv2(df,
file=file.path('~/','hello_world.csv'),
sep = ',',
na = "NA"
)
write.csv2(df,
file=file.path('~/','hello_world.csv'),
na = "NA"
)
View(df)
row0 <- c(rep(NA,2),rep(names(TFTRecording$ch1)[c(-1,-2)],3))
df <- data.frame(getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$'ch2/ch1'[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice))
df <- rbind(row0,df)
colnames(df) <- coln
install.packages("xlsx")
write.xlsx(df,'helloworld.xlsx', sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
library(xlsx)
library(xlsx)
TFTRecording <- read.TFTRecording(file=file)
n <- TFTRecording$nCells
coln <- c(
'Time(h)',
c('mNeonGreen', rep(NA, n-1)),
c('mCherry', rep(NA, n-1)),
c('mCherry/mNeon', rep(NA, n-1))
)
row0 <- c(rep(NA,2),rep(names(TFTRecording$ch1)[c(-1,-2)],3))
df <- data.frame(getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$'ch2/ch1'[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice))
df <- rbind(row0,df)
colnames(df) <- coln
library(xlsx)
write.xlsx(df,'helloworld.xlsx', sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
TFTRecording <- read.TFTRecording(file=file)
n <- TFTRecording$nCells
coln <- c(
'Time(h)',
c('mNeonGreen', rep(NA, n-1)),
c('mCherry', rep(NA, n-1)),
c('mCherry/mNeon', rep(NA, n-1))
)
row0 <- c(rep(NA,2),rep(names(TFTRecording$ch1)[c(-1,-2)],3))
df <- data.frame(getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$'ch2/ch1'[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice))
nCells = 12
TFTRecording <- read.TFTRecording(file=file)
TFTRecording <- read.TFTRecording(file='C:/Users/Jia Geng/Downloads/dt0.tsv')
length(names(dt0))/2-1
read.TFTRecording <- function(file, delim='x'){
dt0 <- read.csv2(file=file,
sep='\t',
stringsAsFactors = FALSE)
dt0 <- data.frame(mapply(FUN=as.numeric, dt0))
stopifnot(names(dt0)[1:2] == c('Slice','Channel'))
bg.cols <- which(mapply(grepl, delim, names(dt0)))
dt1 <- list(
'ch1' = dt0[dt0$Channel==1,-bg.cols],
'ch2' = dt0[dt0$Channel==2, -bg.cols],
'bg1' = dt0[dt0$Channel==1, c(1,2,bg.cols)],
'bg2' = dt0[dt0$Channel==2, c(1,2,bg.cols)]
)
dt1$'ch2/ch1' <- round(dt1$ch2/dt1$ch1,3)
dt1$'nCells' = length(names(dt0))/2-1
return(dt1)
}
TFTRecording <- read.TFTRecording(file='C:/Users/Jia Geng/Downloads/dt0.tsv')
save.image()
n <- TFTRecording$nCells
coln <- c(
'Time(h)',
c('mNeonGreen', rep(NA, n-1)),
c('mCherry', rep(NA, n-1)),
c('mCherry/mNeon', rep(NA, n-1))
)
row0 <- c(rep(NA,2),rep(names(TFTRecording$ch1)[c(-1,-2)],3))
df <- data.frame(getTime(TFTRecording$ch1$Slice),
TFTRecording$ch1[,c(-1,-2)],
TFTRecording$ch2[,c(-1,-2)],
TFTRecording$'ch2/ch1'[,c(-1,-2)],
row.names = getFrame(TFTRecording$ch1$Slice))
df <- rbind(row0,df)
colnames(df) <- coln
library(xlsx)
library("xlsx")
